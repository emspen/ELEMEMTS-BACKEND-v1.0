generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  GUEST
  INDIVIDUAL
  TEAM
  ADMIN
}

enum TokenType {
  ACCESS
  REFRESH
  RESET_PASSWORD
  VERIFY_EMAIL
  INVITATION
}

enum Interval {
  MONTHLY
  ANNUAL
}

enum PlanType {
  INDIVIDUAL
  TEAM
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  EXPIRED
}

enum PaymentMethod {
  STRIPE
  PAYPAL
}

enum PaymentStatus {
  PENDING
  COMPLETED
  CANCELED
  REFUNDED
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  EXPIRED
  DENIED
}

enum AssetStatus {
  DRAFT
  PENDING
  PUBLISHED
  ARCHIVED
}

enum Permission {
  PUBLIC
  PRIVATE
}

enum ProductType {
  IMAGE
  IMAGE_SET
  VIDEO
  AUDIO
  AUDIO_SET
}

model User {
  id        String  @id @default(uuid())
  email     String  @unique
  userName  String? @unique
  googleId  String? @unique
  name      String?
  avatarUrl String?
  password  String
  secret    String
  role      Role    @default(GUEST)

  isEmailVerified Boolean @default(false)
  isSuspended     Boolean @default(false)
  isActive        Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  carts          Cart[]
  projects       Project[]
  Subscription   Subscription[]
  Team           Team[]
  TeamMember     TeamMember[]
  Payment        Payment[]
  TeamInvitation TeamInvitation[]
}

model Cart {
  id        String   @id @default(uuid())
  name      String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@unique([name, userId])
}

model Project {
  id        String   @id @default(uuid())
  name      String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@unique([name, userId])
}

model Plan {
  id       String   @id @default(uuid())
  type     PlanType // 'Individual' or 'Team'
  teamSize Int? // Null for INDIVIDUAL plan; 2-5 for TEAM plans
  price    Float // Price in USD $
  currency String   @default("USD")
  interval Interval @default(MONTHLY)

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Subscription Subscription[]
}

model Subscription {
  id            String             @id @default(uuid())
  planId        String
  userId        String? // For individual plans
  teamId        String? // For team plans
  status        SubscriptionStatus @default(ACTIVE)
  startDate     DateTime
  endDate       DateTime
  renewsAt      DateTime?
  cancelledAt   DateTime?
  paymentMethod PaymentMethod      @default(PAYPAL)
  externalRef   String? // PayPal subscription ID, etc.
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt

  plan     Plan      @relation(fields: [planId], references: [id])
  user     User?     @relation(fields: [userId], references: [id])
  team     Team?
  payments Payment[]
}

model Payment {
  id              String        @id @default(uuid())
  userId          String
  subscriptionId  String
  amount          Float // Amount in USD $
  currency        String        @default("USD")
  status          PaymentStatus @default(PENDING)
  method          PaymentMethod @default(PAYPAL) // 'Paypal', etc.
  paidAt          DateTime?
  paypalOrderId   String?       @unique
  paypalCaptureId String?
  externalRef     String?
  createdAt       DateTime      @default(now())

  user         User         @relation(fields: [userId], references: [id])
  subscription Subscription @relation(fields: [subscriptionId], references: [id])
}

model Team {
  id             String   @id @default(uuid())
  name           String
  ownerId        String
  teamSize       Int
  subscriptionId String   @unique
  createdAt      DateTime @default(now())
  isSuspended    Boolean  @default(false)

  owner          User             @relation(fields: [ownerId], references: [id])
  subscription   Subscription     @relation(fields: [subscriptionId], references: [id])
  members        TeamMember[]
  TeamInvitation TeamInvitation[]
}

model TeamMember {
  id       String    @id @default(uuid())
  teamId   String
  userId   String
  role     String    @default("MEMBER") // 'admin' | 'member'
  joinedAt DateTime  @default(now())
  leftAt   DateTime?

  team Team @relation(fields: [teamId], references: [id])
  user User @relation(fields: [userId], references: [id])
}

model TeamInvitation {
  id          String           @id @default(uuid())
  email       String
  teamId      String
  team        Team             @relation(fields: [teamId], references: [id])
  invitedById String
  invitedBy   User             @relation(fields: [invitedById], references: [id])
  status      InvitationStatus @default(PENDING) // or enum: pending | accepted | expired | denied
  token       String           @unique
  createdAt   DateTime         @default(now())
  expiresAt   DateTime
  acceptedAt  DateTime?
  userId      String? // linked upon registration
}

model Product {
  id            String      @id @default(uuid())
  name          String
  slug          String      @unique // SEO-friendly URL
  description   String?
  previewType   ProductType @default(IMAGE) // 'IMAGE' | 'IMAGE_SET' | 'VIDEO' | 'AUDIO' | 'AUDIO_SET'
  attributes    Json?       @db.JsonB // Flexible metadata storage
  thumbnailPath String[]
  sourcePath    String
  status        AssetStatus @default(PENDING) // DRAFT | PENDING | PUBLISHED | ARCHIVED
  permission    Permission  @default(PUBLIC) // PUBLIC | PRIVATE 

  // Classification
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String

  // Versioning & soft delete
  productVersion Int     @default(1) // Increment on breaking schema changes
  deleted        Boolean @default(false) // Soft-delete flag

  tags      Tag[]
  // Auditing
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  createdBy String?
  updatedBy String?
}

model Tag {
  id        String     @id @default(uuid())
  name      String     @unique
  category  Category[]
  createdAt DateTime   @default(now())

  products Product[]
}

model Category {
  id   String @id @default(uuid())
  name String @unique
  slug String @unique

  parentId String? // null for top-level
  parent   Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children Category[] @relation("CategoryHierarchy")

  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt()
  deleted   Boolean   @default(false)
  Tag       Tag[]
}
